var searchIndex = JSON.parse('{\
"mlx_sys":{"doc":"","t":"NNNENNEAALLLLOLLAAAALLLLAAAAAALLLLLLAAAGDFFFFFFFFFFFFFFFFFFFFFFFFFFFGMMLLGLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLGLLLLMLLLLLLLLLLLLLLLLLLLLLLLMFLLLLLMLLLLGMAAFFFADDLLLLLLSFMLLLSMLLFMFLLLLLLLADDSDSSSLLLLLLSLLLLSLFFFFFFFFFFFFFFFFLLSSSLLLSSSSSLLLFFFFFFFMMMFLLLLLLLLLLLSSSSSMNGNGNGMMMMANNNGGFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFANNNGNNGGFFFFFFNGNANNGNGNNGFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFGFFFFGMMFFFFGFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFGFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFMFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFMFFFFFFFFFFFFFFFFFFFFFFMFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFMFFFFFFFFANNGDNGNNGGFFFFFFFFFFGFMMFLLFFFGFGLFMLFFFFFFFFFFFFFFMFMFFFFLLLFFFFFMAGDLLFMMLMMLFFLLLAAIDDQDDDLLLLLLLLLLKFFALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLGGGGGGGGFFFFFFFFFFFFFFFFFDDDDDDDDGLLLLLLLLLLLLLLLLFFFFFFLLLLLLLLFFFLLLLLLLLFFLLLLLLLLLLLLLLLLLLLLLLLLFFFFFFFFFAAADMLLLLALLLLLLGMLLLLDALMLMLLLLGMMMLLLLADLLLLLLMGAGGFFFFFMM","n":["Default","Device","None","Optional","Some","Stream","StreamOrDevice","array","backend","borrow","borrow","borrow_mut","borrow_mut","cxx_vec","default","default","device","dtype","ffi","fft","from","from","into","into","linalg","macros","ops","random","stream","transforms","try_from","try_from","try_into","try_into","type_id","type_id","types","utils","ffi","Dtype","array","array_from_slice_bfloat16","array_from_slice_bool","array_from_slice_complex64","array_from_slice_float16","array_from_slice_float32","array_from_slice_int16","array_from_slice_int32","array_from_slice_int64","array_from_slice_int8","array_from_slice_uint16","array_from_slice_uint32","array_from_slice_uint64","array_from_slice_uint8","array_new_bf16","array_new_bool","array_new_c64","array_new_f16","array_new_f32","array_new_i16","array_new_i32","array_new_i64","array_new_i8","array_new_u16","array_new_u32","array_new_u64","array_new_u8","array_outputs","bfloat16_t","bits","bits","borrow","borrow_mut","complex64_t","data_bfloat16","data_bool","data_complex64","data_float16","data_float32","data_int16","data_int32","data_int64","data_int8","data_mut_bfloat16","data_mut_bool","data_mut_complex64","data_mut_float16","data_mut_float32","data_mut_int16","data_mut_int32","data_mut_int64","data_mut_int8","data_mut_uint16","data_mut_uint32","data_mut_uint64","data_mut_uint8","data_size","data_uint16","data_uint32","data_uint64","data_uint8","detach","dtype","eval","float16_t","from","graph_depth","has_primitive","id","im","inputs","into","is_donatable","is_evaled","is_tracer","item_bfloat16","item_bool","item_complex64","item_float16","item_float32","item_int16","item_int32","item_int64","item_int8","item_uint16","item_uint32","item_uint64","item_uint8","itemsize","nbytes","ndim","overwrite_descriptor","primitive_id","re","set_array_siblings","set_tracer","shape","shape_of_dim","siblings","size","size","strides","try_from","try_into","type_id","uintptr_t","val","metal","ffi","cache_enabled","is_available","set_cache_enabled","ffi","Device","DeviceType","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","cpu","default_device","device_type","eq","from","from","gpu","index","into","into","new_device","repr","set_default_device","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","ffi","Dtype","Kind","V","Val","b","bfloat16","bool_","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","c","clone","clone","clone_into","clone_into","complex64","default","dtype_bfloat16","dtype_bool_","dtype_complex64","dtype_float16","dtype_float32","dtype_from_array_protocol","dtype_int16","dtype_int32","dtype_int64","dtype_int8","dtype_new","dtype_to_array_protocol","dtype_uint16","dtype_uint32","dtype_uint64","dtype_uint8","eq","eq","f","float16","float32","from","from","from","i","int16","int32","int64","int8","into","into","into","is_available","is_complex","is_floating_point","is_integral","is_unsigned","kindof","promote_types","repr","repr","size","size_of","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","u","uint16","uint32","uint64","uint8","val","Default","Device","Device","Stream","Stream","StreamOrDevice","device","device_type","index","index","ffi","Default","Device","Stream","StreamOrDevice","array","fft","fft2","fft2_axes","fft2_shape_axes","fft_axis","fft_shape_axis","fftn","fftn_axes","fftn_shape_axes","ifft","ifft2","ifft2_axes","ifft2_shape_axes","ifft_axis","ifft_shape_axis","ifftn","ifftn_axes","ifftn_shape_axes","irfft","irfft2","irfft2_axes","irfft2_shape_axes","irfft_axis","irfft_shape_axis","irfftn","irfftn_axes","irfftn_shape_axes","rfft","rfft2","rfft2_axes","rfft2_shape_axes","rfft_axis","rfft_shape_axis","rfftn","rfftn_axes","rfftn_shape_axes","ffi","Default","Device","None","OptionalAxis","Some","Stream","StreamOrDevice","array","norm","norm_axis","norm_ord","norm_ord_axis","norm_str_ord","norm_str_ord_axis","None","OptionalArray","Some","ffi","Default","Device","Dtype","None","OptionalArray","Some","Stream","StreamOrDevice","abs","add","addmm","all","all_along_axes_keepdims","all_along_axis_keepdims","all_keepdims","allclose","any","any_along_axes_keepdims","any_along_axis_keepdims","any_keepdims","arange_f64","arange_i32","arange_start_stop_dtype","arange_start_stop_f64","arange_start_stop_i32","arange_stop_dtype","arange_stop_f64","arange_stop_i32","arccos","arccosh","arcsin","arcsinh","arctan","arctanh","argmax","argmax_along_axis_keepdims","argmax_keepdims","argmin","argmin_along_axis_keepdims","argmin_keepdims","argpartition","argpartition_along_axis","argsort","argsort_along_axis","array","array_equal","array_equal_equal_nan","as_strided","astype","bfloat16_t","bits","bits","broadcast_arrays","broadcast_to","ceil","clip","complex64_t","concatenate","concatenate_along_axis","conv1d","conv2d","copy","cos","cosh","cummax","cummin","cumprod","cumsum","depends","dequantize","diag","diagonal","divide","divmod","equal","erf","erfinv","exp","expand_dims_at_axes","expand_dims_at_axis","eye_n","eye_n_dtype","eye_n_m","eye_n_m_k","eye_n_m_k_dtype","flatten","flatten_start_axis_end_axis","float16_t","floor","floor_divide","full_bfloat16_val","full_bfloat16_val_dtype","full_bool_val","full_bool_val_dtype","full_complex64_val","full_complex64_val_dtype","full_float16_val","full_float16_val_dtype","full_float32_val","full_float32_val_dtype","full_int16_val","full_int16_val_dtype","full_int32_val","full_int32_val_dtype","full_int64_val","full_int64_val_dtype","full_int8_val","full_int8_val_dtype","full_uint16_val","full_uint16_val_dtype","full_uint32_val","full_uint32_val_dtype","full_uint64_val","full_uint64_val_dtype","full_uint8_val","full_uint8_val_dtype","full_vals","full_vals_dtype","gather_along_axes","gather_along_axis","greater","greater_equal","identity","identity_dtype","im","inner","isclose","isinf","isnan","isneginf","isposinf","less","less_equal","linspace","log","log10","log1p","log2","logaddexp","logical_and","logical_not","logical_or","logsumexp","logsumexp_along_axes_keepdims","logsumexp_along_axis_keepdims","logsumexp_keepdims","matmul","max","max_along_axes_keepdims","max_along_axis_keepdims","max_keepdims","maximum","mean","mean_along_axes_keepdims","mean_along_axis_keepdims","mean_keepdims","min","min_along_axes_keepdims","min_along_axis_keepdims","min_keepdims","minimum","moveaxis","multiply","negative","not_equal","ones","ones_dtype","ones_like","outer","pad","pad_axes","pad_same_widths_for_each_axis","pad_unique_widths_for_each_axis","partition","partition_along_axis","power","prod","prod_along_axes_keepdims","prod_along_axis_keepdims","prod_keepdims","quantize","quantized_matmul","re","reciprocal","remainder","repeat","repeat_along_axis","reshape","round","round_to_decimals","rsqrt","scatter_add_along_axes","scatter_add_along_axis","scatter_along_axes","scatter_along_axis","scatter_max_along_axes","scatter_max_along_axis","scatter_min_along_axes","scatter_min_along_axis","scatter_prod_along_axes","scatter_prod_along_axis","sigmoid","sign","sin","sinh","size","slice","slice_start_stop_strides","softmax","softmax_along_axes","softmax_along_axis","sort","sort_along_axis","split_at_indices","split_at_indices_along_axis","split_n","split_n_at_axis","sqrt","square","squeeze","squeeze_axes","squeeze_axis","stack","stack_along_axis","stop_gradient","subtract","sum","sum_along_axes_keepdims","sum_along_axis_keepdims","sum_keepdims","swapaxes","take","take_along_axis","take_flattened","tan","tanh","tensordot_list_dims","tensordot_ndims","tile","topk","topk_along_axis","transpose","transpose_axes","tri_n_dtype","tri_n_m_k_dtype","tril","triu","val","var","var_along_axes_keepdims","var_along_axis_keepdims","var_keepdims","where_condition","zeros","zeros_dtype","zeros_like","ffi","Default","Device","Dtype","KeySequence","None","OptionalArray","Some","Stream","StreamOrDevice","array","bernoulli","bernoulli_bfloat16","bernoulli_complex64","bernoulli_float16","bernoulli_float32","bernoulli_with_shape","bernoulli_with_shape_bfloat16","bernoulli_with_shape_complex64","bernoulli_with_shape_float16","bernoulli_with_shape_float32","bfloat16_t","bits","bits","bits","bits_with_width","borrow","borrow_mut","categorical","categorical_with_num_samples","categorical_with_shape","complex64_t","default_key_sequence","float16_t","from","gumbel","im","into","key","key_sequence","normal","normal_with_dtype","randint","randint_bool","randint_int16","randint_int32","randint_int64","randint_int8","randint_uint16","randint_uint32","randint_uint64","randint_uint8","re","seed","size","split","split_n","truncate_normal_with_shape","truncated_normal","try_from","try_into","type_id","uniform","uniform_bfloat16","uniform_complex64","uniform_float16","uniform_float32","val","ffi","Device","Stream","borrow","borrow_mut","default_stream","device","device_type","from","index","index","into","new_stream","set_default_stream","try_from","try_into","type_id","compat","ffi","Function","MultiInputSingleOutputFn","MultiaryFn","Output","PairInputSingleOutputFn","UnaryFn","VjpFn","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","execute","execute_multiary_fn","execute_unary_fn","ffi","from","from","from","from","from","from","from","from","from","from","into","into","into","into","into","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","CxxMultiInputSingleOutputFn","CxxMultiaryFn","CxxPairInputSingleOutputFn","CxxSimpleValueAndGradFn","CxxSingleInputPairOutputFn","CxxUnaryFn","CxxValueAndGradFn","array","checkpoint","compile","custom_vjp","grad_multi_input_single_output_fn_argnum","grad_multi_input_single_output_fn_argnums","grad_unary_fn","jvp_multiary_fn","jvp_unary_fn","value_and_grad_multi_input_single_output_fn","value_and_grad_multiary_fn_argnum","value_and_grad_multiary_fn_argnums","value_and_grad_unary_fn","vjp_multiary_fn","vjp_unary_fn","vmap_multiary_fn","vmap_pair_input_single_output_fn","vmap_unary_fn","CxxMultiInputSingleOutputFn","CxxMultiaryFn","CxxPairInputSingleOutputFn","CxxSimpleValueAndGradFn","CxxSingleInputPairOutputFn","CxxUnaryFn","CxxValueAndGradFn","CxxVjpFn","array","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","checkpoint","compile","custom_vjp","disable_compile","enable_compile","eval","from","from","from","from","from","from","from","from","grad_multi_input_single_output_cxx_fn_argnum","grad_multi_input_single_output_cxx_fn_argnums","grad_unary_cxx_fn","into","into","into","into","into","into","into","into","jvp_multiary_cxx_fn","jvp_unary_cxx_fn","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","value_and_grad_multi_input_single_output_cxx_fn","value_and_grad_multiary_cxx_fn_argnum","value_and_grad_multiary_cxx_fn_argnums","value_and_grad_unary_cxx_fn","vjp_multiary_cxx_fn","vjp_unary_cxx_fn","vmap_multiary_cxx_fn","vmap_pair_input_single_output_cxx_fn","vmap_unary_cxx_fn","bfloat16","complex64","float16","bfloat16_t","bits","borrow","borrow_mut","clone","clone_into","ffi","from","into","to_owned","try_from","try_into","type_id","bfloat16_t","bits","borrow","borrow_mut","clone","clone_into","complex64_t","ffi","from","im","into","re","to_owned","try_from","try_into","type_id","complex64_t","im","re","bits","borrow","borrow_mut","clone","clone_into","ffi","float16_t","from","into","to_owned","try_from","try_into","type_id","bits","float16_t","ffi","Dtype","array","broadcast_shapes","is_same_shape","normalize_axis","push_back_array","result_type","size","val"],"q":[[0,"mlx_sys"],[38,"mlx_sys::array"],[39,"mlx_sys::array::ffi"],[147,"mlx_sys::backend"],[148,"mlx_sys::backend::metal"],[149,"mlx_sys::backend::metal::ffi"],[152,"mlx_sys::device"],[153,"mlx_sys::device::ffi"],[181,"mlx_sys::dtype"],[182,"mlx_sys::dtype::ffi"],[262,"mlx_sys::ffi"],[272,"mlx_sys::fft"],[273,"mlx_sys::fft::ffi"],[314,"mlx_sys::linalg"],[315,"mlx_sys::linalg::ffi"],[329,"mlx_sys::ops"],[333,"mlx_sys::ops::ffi"],[589,"mlx_sys::random"],[590,"mlx_sys::random::ffi"],[657,"mlx_sys::stream"],[658,"mlx_sys::stream::ffi"],[674,"mlx_sys::transforms"],[676,"mlx_sys::transforms::compat"],[727,"mlx_sys::transforms::compat::ffi"],[752,"mlx_sys::transforms::ffi"],[837,"mlx_sys::types"],[840,"mlx_sys::types::bfloat16"],[853,"mlx_sys::types::bfloat16::ffi"],[855,"mlx_sys::types::complex64"],[869,"mlx_sys::types::complex64::ffi"],[872,"mlx_sys::types::float16"],[885,"mlx_sys::types::float16::ffi"],[887,"mlx_sys::utils"],[888,"mlx_sys::utils::ffi"],[897,"core::result"],[898,"core::any"],[899,"cxx::cxx_vector"],[900,"cxx::unique_ptr"],[901,"core::pin"],[902,"cxx::exception"],[903,"cxx::string"]],"d":["","","","","","","","TODO: add bindings to constructors that takes <code>Primitives</code>?","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","The function pointer used in functions like <code>grad()</code> are …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Compute D = beta * C + alpha * (A @ B)","True if all elements in the std::unique_ptrmlx::core::array…","","","True if all elements in the std::unique_ptrmlx::core::array…","True if the two arrays are equal within the specified …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","True if two arrays have the same shape and elements.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Raise elements of a to the power of b element-wise","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Take std::unique_ptrmlx::core::array slices at the given …","","Take std::unique_ptrmlx::core::array entries at the given …","","","","","","","","","","","","","","","","","","","Renamed to <code>where_condition</code> because <code>where</code> is a reserved …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","TODO: rename mod to something closer to transforms","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","",""],"i":[1,1,2,0,2,1,0,0,0,1,2,1,2,0,1,2,0,0,0,0,1,2,1,2,0,0,0,0,0,0,1,2,1,2,1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,13,5,9,9,0,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,0,9,9,9,9,12,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,12,0,9,9,9,9,9,25,9,9,9,9,0,25,0,0,0,0,0,0,0,0,29,28,29,28,28,28,28,0,29,28,29,28,28,29,29,28,0,28,0,28,29,28,29,28,29,28,0,0,0,31,0,31,30,30,32,30,31,32,30,31,31,30,31,30,31,30,32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,30,31,31,30,30,32,30,31,31,30,30,30,30,32,30,31,0,0,0,0,0,0,0,30,31,32,0,30,31,32,30,31,32,30,31,32,30,31,31,30,30,30,30,32,85,0,85,0,85,0,86,87,86,87,0,35,35,35,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,38,38,37,0,37,38,0,0,0,0,0,0,0,0,88,0,88,0,41,41,0,43,0,43,41,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,47,45,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,42,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,42,0,0,0,0,0,0,0,0,0,50,50,0,0,49,0,49,50,0,0,0,0,0,0,0,0,0,0,0,0,0,0,53,51,0,54,54,0,0,0,0,0,0,54,0,52,54,0,0,0,0,0,0,0,0,0,0,0,0,0,0,52,0,55,0,0,0,0,54,54,54,0,0,0,0,0,55,0,0,0,57,57,0,57,56,57,57,56,57,0,0,57,57,57,0,0,0,0,0,60,0,0,0,59,58,61,62,63,59,58,61,62,63,60,0,0,0,59,59,58,58,61,61,62,62,63,63,59,58,61,62,63,59,58,61,62,63,59,58,61,62,63,59,58,61,62,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,75,71,74,79,78,72,77,76,75,71,74,79,78,72,77,76,0,0,0,0,0,0,75,71,74,79,78,72,77,76,0,0,0,75,71,74,79,78,72,77,76,0,0,75,71,74,79,78,72,77,76,75,71,74,79,78,72,77,76,75,71,74,79,78,72,77,76,0,0,0,0,0,0,0,0,0,0,0,0,0,80,80,80,80,80,0,80,80,80,80,80,80,0,89,81,81,81,81,0,0,81,81,81,81,81,81,81,81,0,90,90,82,82,82,82,82,0,0,82,82,82,82,82,82,91,0,0,0,0,0,0,0,0,0,84,84],"f":[0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[[],1],[[],[[2,[-1]]],[]],0,0,0,0,[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,4,[]],[-1,4,[]],0,0,0,0,0,[[[6,[5]],[8,[7]]],[[10,[9]]]],[[[6,[11]],[8,[7]]],[[10,[9]]]],[[[6,[12]],[8,[7]]],[[10,[9]]]],[[[6,[13]],[8,[7]]],[[10,[9]]]],[[[6,[14]],[8,[7]]],[[10,[9]]]],[[[6,[15]],[8,[7]]],[[10,[9]]]],[[[6,[7]],[8,[7]]],[[10,[9]]]],[[[6,[16]],[8,[7]]],[[10,[9]]]],[[[6,[17]],[8,[7]]],[[10,[9]]]],[[[6,[18]],[8,[7]]],[[10,[9]]]],[[[6,[19]],[8,[7]]],[[10,[9]]]],[[[6,[20]],[8,[7]]],[[10,[9]]]],[[[6,[21]],[8,[7]]],[[10,[9]]]],[5,[[10,[9]]]],[11,[[10,[9]]]],[12,[[10,[9]]]],[13,[[10,[9]]]],[14,[[10,[9]]]],[15,[[10,[9]]]],[7,[[10,[9]]]],[16,[[10,[9]]]],[17,[[10,[9]]]],[18,[[10,[9]]]],[19,[[10,[9]]]],[20,[[10,[9]]]],[21,[[10,[9]]]],[[[22,[9]]],[[10,[[8,[9]]]]]],0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],0,[9,5],[9,11],[9,12],[9,13],[9,14],[9,15],[9,7],[9,16],[9,17],[[[22,[9]]],5],[[[22,[9]]],11],[[[22,[9]]],12],[[[22,[9]]],13],[[[22,[9]]],14],[[[22,[9]]],15],[[[22,[9]]],7],[[[22,[9]]],16],[[[22,[9]]],17],[[[22,[9]]],18],[[[22,[9]]],19],[[[22,[9]]],20],[[[22,[9]]],21],[9,23],[9,18],[9,19],[9,20],[9,21],[[[22,[9]]],24],[9,25],[[[22,[9]]],[[3,[24,26]]]],0,[-1,-1,[]],[9,18],[9,11],[9,27],0,[9,[[8,[9]]]],[-1,-2,[],[]],[9,11],[9,11],[9,11],[[[22,[9]]],[[3,[5,26]]]],[[[22,[9]]],[[3,[11,26]]]],[[[22,[9]]],[[3,[12,26]]]],[[[22,[9]]],[[3,[13,26]]]],[[[22,[9]]],[[3,[14,26]]]],[[[22,[9]]],[[3,[15,26]]]],[[[22,[9]]],[[3,[7,26]]]],[[[22,[9]]],[[3,[16,26]]]],[[[22,[9]]],[[3,[17,26]]]],[[[22,[9]]],[[3,[18,26]]]],[[[22,[9]]],[[3,[19,26]]]],[[[22,[9]]],[[3,[20,26]]]],[[[22,[9]]],[[3,[21,26]]]],[9,23],[9,23],[9,23],[[[22,[9]],9],24],[9,27],0,[[[22,[9]],[10,[[8,[9]]]],18],24],[[[22,[9]],11],24],[9,[[8,[7]]]],[[9,7],7],[9,[[8,[9]]]],[9,23],0,[9,[[8,[23]]]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,4,[]],0,0,0,0,[[],11],[[],11],[11,24],0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[28,28],[[-1,-2],24,[],[]],0,[[],29],0,[[28,28],11],[-1,-1,[]],[-1,-1,[]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[[28,7],29],0,[29,[[3,[24,26]]]],[-1,-2,[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,4,[]],[-1,4,[]],0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[30,30],[31,31],[[-1,-2],24,[],[]],[[-1,-2],24,[],[]],0,[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[33,[[3,[32,26]]]],[[],32],[[],32],[[],32],[[],32],[[30,21],32],[32,[[10,[33]]]],[[],32],[[],32],[[],32],[[],32],[[30,30],11],[[31,31],11],0,0,0,[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[32,11],[32,11],[32,11],[32,11],[32,11],[32,31],[[32,32],32],0,0,0,[32,21],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,4,[]],[-1,4,[]],[-1,4,[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[34,35],[[3,[[10,[34]],26]]]],[[34,35],[[3,[[10,[34]],26]]]],[[34,[8,[7]],35],[[3,[[10,[34]],26]]]],[[34,[8,[7]],[8,[7]],35],[[3,[[10,[34]],26]]]],[[34,7,35],[[3,[[10,[34]],26]]]],[[34,7,7,35],[[3,[[10,[34]],26]]]],[[34,35],[[3,[[10,[34]],26]]]],[[34,[8,[7]],35],[[3,[[10,[34]],26]]]],[[34,[8,[7]],[8,[7]],35],[[3,[[10,[34]],26]]]],[[34,35],[[3,[[10,[34]],26]]]],[[34,35],[[3,[[10,[34]],26]]]],[[34,[8,[7]],35],[[3,[[10,[34]],26]]]],[[34,[8,[7]],[8,[7]],35],[[3,[[10,[34]],26]]]],[[34,7,35],[[3,[[10,[34]],26]]]],[[34,7,7,35],[[3,[[10,[34]],26]]]],[[34,35],[[3,[[10,[34]],26]]]],[[34,[8,[7]],35],[[3,[[10,[34]],26]]]],[[34,[8,[7]],[8,[7]],35],[[3,[[10,[34]],26]]]],[[34,35],[[3,[[10,[34]],26]]]],[[34,35],[[3,[[10,[34]],26]]]],[[34,[8,[7]],35],[[3,[[10,[34]],26]]]],[[34,[8,[7]],[8,[7]],35],[[3,[[10,[34]],26]]]],[[34,7,35],[[3,[[10,[34]],26]]]],[[34,7,7,35],[[3,[[10,[34]],26]]]],[[34,35],[[3,[[10,[34]],26]]]],[[34,[8,[7]],35],[[3,[[10,[34]],26]]]],[[34,[8,[7]],[8,[7]],35],[[3,[[10,[34]],26]]]],[[34,35],[[3,[[10,[34]],26]]]],[[34,35],[[3,[[10,[34]],26]]]],[[34,[8,[7]],35],[[3,[[10,[34]],26]]]],[[34,[8,[7]],[8,[7]],35],[[3,[[10,[34]],26]]]],[[34,7,35],[[3,[[10,[34]],26]]]],[[34,7,7,35],[[3,[[10,[34]],26]]]],[[34,35],[[3,[[10,[34]],26]]]],[[34,[8,[7]],35],[[3,[[10,[34]],26]]]],[[34,[8,[7]],[8,[7]],35],[[3,[[10,[34]],26]]]],0,0,0,0,0,0,0,0,0,[[36,37,11,38],[[3,[[10,[36]],26]]]],[[36,7,11,38],[[3,[[10,[36]],26]]]],[[36,39,37,11,38],[[3,[[10,[36]],26]]]],[[36,39,7,11,38],[[3,[[10,[36]],26]]]],[[36,33,37,11,38],[[3,[[10,[36]],26]]]],[[36,33,7,11,38],[[3,[[10,[36]],26]]]],0,0,0,0,0,0,0,0,0,0,0,0,[[40,41],[[3,[[10,[40]],26]]]],[[40,40,41],[[3,[[10,[40]],26]]]],[[[10,[40]],[10,[40]],[10,[40]],14,14,41],[[3,[[10,[40]],26]]]],[[40,41],[[3,[[10,[40]],26]]]],[[40,[8,[7]],11,41],[[3,[[10,[40]],26]]]],[[40,7,11,41],[[3,[[10,[40]],26]]]],[[40,11,41],[[3,[[10,[40]],26]]]],[[40,40,39,39,11,41],[[3,[[10,[40]],26]]]],[[40,41],[[3,[[10,[40]],26]]]],[[40,[8,[7]],11,41],[[3,[[10,[40]],26]]]],[[40,7,11,41],[[3,[[10,[40]],26]]]],[[40,11,41],[[3,[[10,[40]],26]]]],[[39,39,39,41],[[3,[[10,[40]],26]]]],[[7,7,7,41],[[3,[[10,[40]],26]]]],[[39,39,42,41],[[3,[[10,[40]],26]]]],[[39,39,41],[[3,[[10,[40]],26]]]],[[7,7,41],[[3,[[10,[40]],26]]]],[[39,42,41],[[3,[[10,[40]],26]]]],[[39,41],[[3,[[10,[40]],26]]]],[[7,41],[[3,[[10,[40]],26]]]],[[40,41],[[3,[[10,[40]],26]]]],[[40,41],[[3,[[10,[40]],26]]]],[[40,41],[[3,[[10,[40]],26]]]],[[40,41],[[3,[[10,[40]],26]]]],[[40,41],[[3,[[10,[40]],26]]]],[[40,41],[[3,[[10,[40]],26]]]],[[40,41],[[3,[[10,[40]],26]]]],[[40,7,11,41],[[3,[[10,[40]],26]]]],[[40,11,41],[[3,[[10,[40]],26]]]],[[40,41],[[3,[[10,[40]],26]]]],[[40,7,11,41],[[3,[[10,[40]],26]]]],[[40,11,41],[[3,[[10,[40]],26]]]],[[40,7,41],[[3,[[10,[40]],26]]]],[[40,7,7,41],[[3,[[10,[40]],26]]]],[[40,41],[[3,[[10,[40]],26]]]],[[40,7,41],[[3,[[10,[40]],26]]]],0,[[40,40,41],[[10,[40]]]],[[40,40,11,41],[[10,[40]]]],[[40,[10,[[8,[7]]]],[10,[[8,[23]]]],23,41],[[3,[[10,[40]],26]]]],[[40,42,41],[[3,[[10,[40]],26]]]],0,0,0,[[[6,[[10,[40]]]],41],[[3,[[10,[[8,[40]]]],26]]]],[[40,[8,[7]],41],[[3,[[10,[40]],26]]]],[[40,41],[[3,[[10,[40]],26]]]],[[40,43,43,41],[[3,[[10,[40]],26]]]],0,[[[6,[[10,[40]]]],41],[[3,[[10,[40]],26]]]],[[[6,[[10,[40]]]],7,41],[[3,[[10,[40]],26]]]],[[40,40,7,7,7,7,41],[[3,[[10,[40]],26]]]],[[40,40,[44,[7]],[44,[7]],[44,[7]],7,41],[[3,[[10,[40]],26]]]],[[40,41],[[3,[[10,[40]],26]]]],[[40,41],[[3,[[10,[40]],26]]]],[[40,41],[[3,[[10,[40]],26]]]],[[40,7,11,11,41],[[3,[[10,[40]],26]]]],[[40,7,11,11,41],[[3,[[10,[40]],26]]]],[[40,7,11,11,41],[[3,[[10,[40]],26]]]],[[40,7,11,11,41],[[3,[[10,[40]],26]]]],[[[8,[40]],[8,[40]]],[[3,[[10,[[8,[40]]]],26]]]],[[40,40,40,7,7,41],[[3,[[10,[40]],26]]]],[[40,7,41],[[3,[[10,[40]],26]]]],[[40,7,7,7,41],[[3,[[10,[40]],26]]]],[[40,40,41],[[3,[[10,[40]],26]]]],[[40,40,41],[[3,[[10,[[8,[40]]]],26]]]],[[40,40,41],[[3,[[10,[40]],26]]]],[[40,41],[[3,[[10,[40]],26]]]],[[40,41],[[3,[[10,[40]],26]]]],[[40,41],[[3,[[10,[40]],26]]]],[[40,[8,[7]],41],[[3,[[10,[40]],26]]]],[[40,7,41],[[3,[[10,[40]],26]]]],[[7,41],[[3,[[10,[40]],26]]]],[[7,42,41],[[3,[[10,[40]],26]]]],[[7,7,41],[[3,[[10,[40]],26]]]],[[7,7,7,41],[[3,[[10,[40]],26]]]],[[7,7,7,42,41],[[3,[[10,[40]],26]]]],[[40,41],[[3,[[10,[40]],26]]]],[[40,7,7,41],[[3,[[10,[40]],26]]]],0,[[40,41],[[3,[[10,[40]],26]]]],[[40,40,41],[[3,[[10,[40]],26]]]],[[[8,[7]],45,41],[[3,[[10,[40]],26]]]],[[[8,[7]],45,42,41],[[3,[[10,[40]],26]]]],[[[8,[7]],11,41],[[3,[[10,[40]],26]]]],[[[8,[7]],11,42,41],[[3,[[10,[40]],26]]]],[[[8,[7]],46,41],[[3,[[10,[40]],26]]]],[[[8,[7]],46,42,41],[[3,[[10,[40]],26]]]],[[[8,[7]],47,41],[[3,[[10,[40]],26]]]],[[[8,[7]],47,42,41],[[3,[[10,[40]],26]]]],[[[8,[7]],14,41],[[3,[[10,[40]],26]]]],[[[8,[7]],14,42,41],[[3,[[10,[40]],26]]]],[[[8,[7]],15,41],[[3,[[10,[40]],26]]]],[[[8,[7]],15,42,41],[[3,[[10,[40]],26]]]],[[[8,[7]],7,41],[[3,[[10,[40]],26]]]],[[[8,[7]],7,42,41],[[3,[[10,[40]],26]]]],[[[8,[7]],16,41],[[3,[[10,[40]],26]]]],[[[8,[7]],16,42,41],[[3,[[10,[40]],26]]]],[[[8,[7]],17,41],[[3,[[10,[40]],26]]]],[[[8,[7]],17,42,41],[[3,[[10,[40]],26]]]],[[[8,[7]],18,41],[[3,[[10,[40]],26]]]],[[[8,[7]],18,42,41],[[3,[[10,[40]],26]]]],[[[8,[7]],19,41],[[3,[[10,[40]],26]]]],[[[8,[7]],19,42,41],[[3,[[10,[40]],26]]]],[[[8,[7]],20,41],[[3,[[10,[40]],26]]]],[[[8,[7]],20,42,41],[[3,[[10,[40]],26]]]],[[[8,[7]],21,41],[[3,[[10,[40]],26]]]],[[[8,[7]],21,42,41],[[3,[[10,[40]],26]]]],[[[8,[7]],40,41],[[3,[[10,[40]],26]]]],[[[8,[7]],40,42,41],[[3,[[10,[40]],26]]]],[[40,[6,[[10,[40]]]],[8,[7]],[8,[7]],41],[[3,[[10,[40]],26]]]],[[40,40,7,[8,[7]],41],[[3,[[10,[40]],26]]]],[[40,40,41],[[3,[[10,[40]],26]]]],[[40,40,41],[[3,[[10,[40]],26]]]],[[7,41],[[10,[40]]]],[[7,42,41],[[10,[40]]]],0,[[40,40,41],[[3,[[10,[40]],26]]]],[[40,40,39,39,11,41],[[3,[[10,[40]],26]]]],[[40,41],[[10,[40]]]],[[40,41],[[10,[40]]]],[[40,41],[[10,[40]]]],[[40,41],[[10,[40]]]],[[40,40,41],[[3,[[10,[40]],26]]]],[[40,40,41],[[3,[[10,[40]],26]]]],[[39,39,7,42,41],[[3,[[10,[40]],26]]]],[[40,41],[[3,[[10,[40]],26]]]],[[40,41],[[3,[[10,[40]],26]]]],[[40,41],[[3,[[10,[40]],26]]]],[[40,41],[[3,[[10,[40]],26]]]],[[40,40,41],[[3,[[10,[40]],26]]]],[[40,40,41],[[3,[[10,[40]],26]]]],[[40,41],[[3,[[10,[40]],26]]]],[[40,40,41],[[3,[[10,[40]],26]]]],[[40,41],[[10,[40]]]],[[40,[8,[7]],11,41],[[10,[40]]]],[[40,7,11,41],[[10,[40]]]],[[40,11,41],[[10,[40]]]],[[40,40,41],[[3,[[10,[40]],26]]]],[[40,41],[[3,[[10,[40]],26]]]],[[40,[8,[7]],11,41],[[3,[[10,[40]],26]]]],[[40,7,11,41],[[3,[[10,[40]],26]]]],[[40,11,41],[[3,[[10,[40]],26]]]],[[40,40,41],[[3,[[10,[40]],26]]]],[[40,41],[[10,[40]]]],[[40,[8,[7]],11,41],[[10,[40]]]],[[40,7,11,41],[[10,[40]]]],[[40,11,41],[[10,[40]]]],[[40,41],[[3,[[10,[40]],26]]]],[[40,[8,[7]],11,41],[[3,[[10,[40]],26]]]],[[40,7,11,41],[[3,[[10,[40]],26]]]],[[40,11,41],[[3,[[10,[40]],26]]]],[[40,40,41],[[3,[[10,[40]],26]]]],[[40,7,7,41],[[3,[[10,[40]],26]]]],[[40,40,41],[[3,[[10,[40]],26]]]],[[40,41],[[3,[[10,[40]],26]]]],[[40,40,41],[[3,[[10,[40]],26]]]],[[[8,[7]],41],[[10,[40]]]],[[[8,[7]],42,41],[[10,[40]]]],[[40,41],[[10,[40]]]],[[40,40,41],[[10,[40]]]],[[40,7,40,41],[[3,[[10,[40]],26]]]],[[40,[8,[7]],[8,[7]],[8,[7]],40,41],[[3,[[10,[40]],26]]]],[[40,[44,[7]],40,41],[[3,[[10,[40]],26]]]],[[40,[6,[[44,[7]]]],40,41],[[3,[[10,[40]],26]]]],[[40,7,41],[[3,[[10,[40]],26]]]],[[40,7,7,41],[[3,[[10,[40]],26]]]],[[40,40,41],[[3,[[10,[40]],26]]]],[[40,41],[[3,[[10,[40]],26]]]],[[40,[8,[7]],11,41],[[3,[[10,[40]],26]]]],[[40,7,11,41],[[3,[[10,[40]],26]]]],[[40,11,41],[[3,[[10,[40]],26]]]],[[40,7,7,41],[[3,[[44,[[10,[40]]]],26]]]],[[40,40,40,40,11,7,7,41],[[3,[[10,[40]],26]]]],0,[[40,41],[[10,[40]]]],[[40,40,41],[[3,[[10,[40]],26]]]],[[40,7,41],[[3,[[10,[40]],26]]]],[[40,7,7,41],[[3,[[10,[40]],26]]]],[[40,[10,[[8,[7]]]],41],[[3,[[10,[40]],26]]]],[[40,41],[[3,[[10,[40]],26]]]],[[40,7,41],[[3,[[10,[40]],26]]]],[[40,41],[[10,[40]]]],[[40,[6,[[10,[40]]]],40,[8,[7]],41],[[3,[[10,[40]],26]]]],[[40,40,40,7,41],[[3,[[10,[40]],26]]]],[[40,[6,[[10,[40]]]],40,[8,[7]],41],[[3,[[10,[40]],26]]]],[[40,40,40,7,41],[[3,[[10,[40]],26]]]],[[40,[6,[[10,[40]]]],40,[8,[7]],41],[[3,[[10,[40]],26]]]],[[40,40,40,7,41],[[3,[[10,[40]],26]]]],[[40,[6,[[10,[40]]]],40,[8,[7]],41],[[3,[[10,[40]],26]]]],[[40,40,40,7,41],[[3,[[10,[40]],26]]]],[[40,[6,[[10,[40]]]],40,[8,[7]],41],[[3,[[10,[40]],26]]]],[[40,40,40,7,41],[[3,[[10,[40]],26]]]],[[40,41],[[3,[[10,[40]],26]]]],[[40,41],[[3,[[10,[40]],26]]]],[[40,41],[[3,[[10,[40]],26]]]],[[40,41],[[3,[[10,[40]],26]]]],0,[[40,[8,[7]],[8,[7]],41],[[3,[[10,[40]],26]]]],[[40,[10,[[8,[7]]]],[10,[[8,[7]]]],[10,[[8,[7]]]],41],[[3,[[10,[40]],26]]]],[[40,41],[[3,[[10,[40]],26]]]],[[40,[8,[7]],41],[[3,[[10,[40]],26]]]],[[40,7,41],[[3,[[10,[40]],26]]]],[[40,41],[[3,[[10,[40]],26]]]],[[40,7,41],[[3,[[10,[40]],26]]]],[[40,[8,[7]],41],[[3,[[10,[[8,[40]]]],26]]]],[[40,[8,[7]],7,41],[[3,[[10,[[8,[40]]]],26]]]],[[40,7,41],[[3,[[10,[[8,[40]]]],26]]]],[[40,7,7,41],[[3,[[10,[[8,[40]]]],26]]]],[[40,41],[[3,[[10,[40]],26]]]],[[40,41],[[3,[[10,[40]],26]]]],[[40,41],[[3,[[10,[40]],26]]]],[[40,[8,[7]],41],[[3,[[10,[40]],26]]]],[[40,7,41],[[3,[[10,[40]],26]]]],[[[6,[[10,[40]]]],41],[[3,[[10,[40]],26]]]],[[[6,[[10,[40]]]],7,41],[[3,[[10,[40]],26]]]],[[40,41],[[3,[[10,[40]],26]]]],[[40,40,41],[[3,[[10,[40]],26]]]],[[40,41],[[3,[[10,[40]],26]]]],[[40,[8,[7]],11,41],[[3,[[10,[40]],26]]]],[[40,7,11,41],[[3,[[10,[40]],26]]]],[[40,11,41],[[3,[[10,[40]],26]]]],[[40,7,7,41],[[3,[[10,[40]],26]]]],[[40,40,7,41],[[3,[[10,[40]],26]]]],[[40,40,7,41],[[3,[[10,[40]],26]]]],[[40,40,41],[[3,[[10,[40]],26]]]],[[40,41],[[3,[[10,[40]],26]]]],[[40,41],[[3,[[10,[40]],26]]]],[[40,40,[44,[[10,[[8,[7]]]]]],41],[[3,[[10,[40]],26]]]],[[40,40,7,41],[[3,[[10,[40]],26]]]],[[40,[10,[[8,[7]]]],41],[[10,[40]]]],[[40,7,41],[[3,[[10,[40]],26]]]],[[40,7,7,41],[[3,[[10,[40]],26]]]],[[40,41],[[3,[[10,[40]],26]]]],[[40,[10,[[8,[7]]]],41],[[3,[[10,[40]],26]]]],[[7,42,41],[[10,[40]]]],[[7,7,7,42,41],[[10,[40]]]],[[[10,[40]],7,41],[[3,[[10,[40]],26]]]],[[[10,[40]],7,41],[[3,[[10,[40]],26]]]],0,[[40,41],[[10,[40]]]],[[40,[8,[7]],11,7,41],[[10,[40]]]],[[40,7,11,7,41],[[10,[40]]]],[[40,11,7,41],[[10,[40]]]],[[40,40,40,41],[[10,[40]]]],[[[8,[7]],41],[[10,[40]]]],[[[8,[7]],42,41],[[10,[40]]]],[[40,41],[[10,[40]]]],0,0,0,0,0,0,0,0,0,0,0,[[48,49,50],[[3,[[10,[48]],26]]]],[[51,49,50],[[3,[[10,[48]],26]]]],[[52,49,50],[[3,[[10,[48]],26]]]],[[53,49,50],[[3,[[10,[48]],26]]]],[[14,49,50],[[3,[[10,[48]],26]]]],[[48,[8,[7]],49,50],[[3,[[10,[48]],26]]]],[[51,[8,[7]],49,50],[[10,[48]]]],[[52,[8,[7]],49,50],[[10,[48]]]],[[53,[8,[7]],49,50],[[10,[48]]]],[[14,[8,[7]],49,50],[[10,[48]]]],0,[[[8,[7]],49,50],[[3,[[10,[48]],26]]]],0,0,[[[8,[7]],7,49,50],[[3,[[10,[48]],26]]]],[-1,-2,[],[]],[-1,-2,[],[]],[[48,7,49,50],[[3,[[10,[48]],26]]]],[[48,7,7,49,50],[[3,[[10,[48]],26]]]],[[48,7,[8,[7]],49,50],[[3,[[10,[48]],26]]]],0,[[],54],0,[-1,-1,[]],[[[8,[7]],55,49,50],[[10,[48]]]],0,[-1,-2,[],[]],[20,[[10,[48]]]],[20,[[10,[54]]]],[[[8,[7]],49,50],[[10,[48]]]],[[[8,[7]],55,49,50],[[10,[48]]]],[[48,48,[8,[7]],55,49,50],[[3,[[10,[48]],26]]]],[[11,11,[8,[7]],55,49,50],[[3,[[10,[48]],26]]]],[[15,15,[8,[7]],55,49,50],[[3,[[10,[48]],26]]]],[[7,7,[8,[7]],55,49,50],[[3,[[10,[48]],26]]]],[[16,16,[8,[7]],55,49,50],[[3,[[10,[48]],26]]]],[[17,17,[8,[7]],55,49,50],[[3,[[10,[48]],26]]]],[[18,18,[8,[7]],55,49,50],[[3,[[10,[48]],26]]]],[[19,19,[8,[7]],55,49,50],[[3,[[10,[48]],26]]]],[[20,20,[8,[7]],55,49,50],[[3,[[10,[48]],26]]]],[[21,21,[8,[7]],55,49,50],[[3,[[10,[48]],26]]]],0,[20,24],0,[[48,50],[[44,[[10,[48]]]]]],[[48,7,50],[[10,[48]]]],[[48,48,[8,[7]],55,49,50],[[3,[[10,[48]],26]]]],[[48,48,55,49,50],[[3,[[10,[48]],26]]]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,4,[]],[[48,48,[8,[7]],55,49,50],[[3,[[10,[48]],26]]]],[[51,51,[8,[7]],55,49,50],[[3,[[10,[48]],26]]]],[[52,52,[8,[7]],55,49,50],[[3,[[10,[48]],26]]]],[[53,53,[8,[7]],55,49,50],[[3,[[10,[48]],26]]]],[[14,14,[8,[7]],55,49,50],[[3,[[10,[48]],26]]]],0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[56,[[3,[57,26]]]],0,0,[-1,-1,[]],0,0,[-1,-2,[],[]],[56,[[3,[57,26]]]],[57,[[3,[24,26]]]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,4,[]],0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[-1,-2],[],[],[]],[[58,[8,[9]]],[[10,[[8,[9]]]]]],[[59,9],[[10,[9]]]],0,[-1,59,[[60,[9]]]],[-1,-1,[]],[-1,58,[[60,[[8,[9]]]]]],[-1,-1,[]],[-1,-1,[]],[-1,61,[[60,[[8,[9]]]]]],[-1,62,[[60,[[44,[9]]]]]],[-1,-1,[]],[-1,63,[[60,[[44,[[8,[9]]]]]]]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,4,[]],[-1,4,[]],[-1,4,[]],[-1,4,[]],[-1,4,[]],0,0,0,0,0,0,0,0,[58,[[3,[[10,[64]],26]]]],[58,[[3,[[10,[64]],26]]]],[[58,63],[[3,[[10,[64]],26]]]],[[61,7],[[3,[[10,[64]],26]]]],[[61,[8,[7]]],[[3,[[10,[64]],26]]]],[59,[[3,[[10,[65]],26]]]],[[58,[6,[[10,[66]]]],[6,[[10,[66]]]]],[[3,[[44,[[10,[[8,[66]]]]]],26]]]],[[59,66,66],[[3,[[44,[[10,[66]]]],26]]]],[[61,[8,[7]]],[[3,[[10,[67]],26]]]],[[58,7],[[3,[[10,[68]],26]]]],[[58,[8,[7]]],[[3,[[10,[68]],26]]]],[59,[[3,[[10,[69]],26]]]],[[58,[6,[[10,[66]]]],[6,[[10,[66]]]]],[[3,[[44,[[10,[[8,[66]]]]]],26]]]],[[59,66,66],[[3,[[44,[[10,[66]]]],26]]]],[[58,[8,[7]],[8,[7]]],[[3,[[10,[64]],26]]]],[[62,7,7,7],[[3,[[10,[70]],26]]]],[[59,7,7],[[3,[[10,[65]],26]]]],0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[10,[71]]],[[3,[[10,[71]],26]]]],[71,[[3,[[10,[71]],26]]]],[[[10,[71]],[10,[72]]],[[3,[[10,[71]],26]]]],[[],24],[[],24],[[[6,[[10,[73]]]]],[[3,[24,26]]]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[74,7],[[3,[[10,[71]],26]]]],[[74,[8,[7]]],[[3,[[10,[71]],26]]]],[75,[[3,[[10,[75]],26]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[71,[6,[[10,[73]]]],[6,[[10,[73]]]]],[[3,[[44,[[10,[[8,[73]]]]]],26]]]],[[75,73,73],[[3,[[44,[[10,[73]]]],26]]]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,4,[]],[-1,4,[]],[-1,4,[]],[-1,4,[]],[-1,4,[]],[-1,4,[]],[-1,4,[]],[-1,4,[]],[[74,[8,[7]]],[[3,[[10,[76]],26]]]],[[71,7],[[3,[[10,[77]],26]]]],[[71,[8,[7]]],[[3,[[10,[77]],26]]]],[75,[[3,[[10,[78]],26]]]],[[71,[6,[[10,[73]]]],[6,[[10,[73]]]]],[[3,[[44,[[10,[[8,[73]]]]]],26]]]],[[75,73,73],[[3,[[44,[[10,[73]]]],26]]]],[[71,[8,[7]],[8,[7]]],[[3,[[10,[71]],26]]]],[[79,7,7,7],[[3,[[10,[79]],26]]]],[[75,7,7],[[3,[[10,[75]],26]]]],0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[80,80],[[-1,-2],24,[],[]],0,[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,4,[]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[81,81],[[-1,-2],24,[],[]],0,0,[-1,-1,[]],0,[-1,-2,[],[]],0,[-1,-2,[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,4,[]],0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[82,82],[[-1,-2],24,[],[]],0,0,[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,4,[]],0,0,0,0,0,[[[8,[7]],[8,[7]]],[[3,[[10,[[8,[7]]]],26]]]],[[[6,[[10,[83]]]]],11],[[7,7],[[3,[7,26]]]],[[[22,[[8,[83]]]],[10,[83]]],24],[[[6,[[10,[83]]]]],84],0,0],"c":[],"p":[[4,"StreamOrDevice",0],[4,"Optional",0],[4,"Result",897],[3,"TypeId",898],[6,"bfloat16_t",39],[15,"slice"],[15,"i32"],[3,"CxxVector",899],[3,"array",39],[3,"UniquePtr",900],[15,"bool"],[6,"complex64_t",39],[6,"float16_t",39],[15,"f32"],[15,"i16"],[15,"i64"],[15,"i8"],[15,"u16"],[15,"u32"],[15,"u64"],[15,"u8"],[3,"Pin",901],[15,"usize"],[15,"tuple"],[6,"Dtype",39],[3,"Exception",902],[6,"uintptr_t",39],[3,"DeviceType",153],[3,"Device",153],[3,"Val",182],[3,"Kind",182],[3,"Dtype",182],[3,"CxxString",903],[6,"array",273],[6,"StreamOrDevice",273],[6,"array",315],[6,"OptionalAxis",315],[6,"StreamOrDevice",315],[15,"f64"],[6,"array",333],[6,"StreamOrDevice",333],[6,"Dtype",333],[6,"OptionalArray",333],[15,"array"],[6,"bfloat16_t",333],[6,"complex64_t",333],[6,"float16_t",333],[6,"array",590],[6,"OptionalArray",590],[6,"StreamOrDevice",590],[6,"bfloat16_t",590],[6,"complex64_t",590],[6,"float16_t",590],[3,"KeySequence",590],[6,"Dtype",590],[6,"Device",658],[3,"Stream",658],[3,"MultiaryFn",676],[3,"UnaryFn",676],[8,"Function",676],[3,"MultiInputSingleOutputFn",676],[3,"PairInputSingleOutputFn",676],[3,"VjpFn",676],[6,"CxxMultiaryFn",727],[6,"CxxUnaryFn",727],[6,"array",727],[6,"CxxSimpleValueAndGradFn",727],[6,"CxxValueAndGradFn",727],[6,"CxxSingleInputPairOutputFn",727],[6,"CxxPairInputSingleOutputFn",727],[3,"CxxMultiaryFn",752],[3,"CxxVjpFn",752],[6,"array",752],[3,"CxxMultiInputSingleOutputFn",752],[3,"CxxUnaryFn",752],[3,"CxxSimpleValueAndGradFn",752],[3,"CxxValueAndGradFn",752],[3,"CxxSingleInputPairOutputFn",752],[3,"CxxPairInputSingleOutputFn",752],[3,"bfloat16_t",840],[3,"complex64_t",855],[3,"float16_t",872],[6,"array",888],[6,"Dtype",888],[6,"StreamOrDevice",262],[6,"Stream",262],[6,"Device",262],[6,"OptionalArray",329],[6,"bfloat16_t",853],[6,"complex64_t",869],[6,"float16_t",885]],"b":[]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
